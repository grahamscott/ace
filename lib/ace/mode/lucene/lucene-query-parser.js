define(function(require, exports, module) {
var lucenequeryparser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "EOF": parse_EOF,
        "_": parse__,
        "boost_modifier": parse_boost_modifier,
        "decimal_exp": parse_decimal_exp,
        "decimal_or_int_exp": parse_decimal_or_int_exp,
        "field_exp": parse_field_exp,
        "fieldname": parse_fieldname,
        "fuzzy_modifier": parse_fuzzy_modifier,
        "group_exp": parse_group_exp,
        "int_exp": parse_int_exp,
        "node": parse_node,
        "operator": parse_operator,
        "operator_exp": parse_operator_exp,
        "paren_exp": parse_paren_exp,
        "prefix_operator": parse_prefix_operator,
        "prefix_operator_exp": parse_prefix_operator_exp,
        "proximity_modifier": parse_proximity_modifier,
        "quoted_term": parse_quoted_term,
        "range_operator_exp": parse_range_operator_exp,
        "start": parse_start,
        "term": parse_term,
        "unquoted_term": parse_unquoted_term
      };

      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }

      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);

        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        rightmostMatchFailuresExpected.push(failure);
      }

      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        var savedPos3 = pos;
        var result11 = [];
        var result14 = parse__();
        while (result14 !== null) {
          result11.push(result14);
          var result14 = parse__();
        }
        if (result11 !== null) {
          var result13 = parse_node();
          if (result13 !== null) {
            var result12 = [];
            while (result13 !== null) {
              result12.push(result13);
              var result13 = parse_node();
            }
          } else {
            var result12 = null;
          }
          if (result12 !== null) {
            var result9 = [result11, result12];
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(node) {
                  return node[0];
              })(result9[1])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos1 = pos;
          var result5 = [];
          var result7 = parse__();
          while (result7 !== null) {
            result5.push(result7);
            var result7 = parse__();
          }
          var result6 = result5 !== null
            ? (function() {
                    return {};
                })()
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            var result2 = parse_EOF();
            var result3 = result2 !== null
              ? (function() {
                      return {};
                  })()
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_node() {
        var cacheKey = 'node@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos4 = pos;
        var savedPos5 = pos;
        var result17 = parse_operator_exp();
        if (result17 !== null) {
          var result18 = parse_EOF();
          if (result18 !== null) {
            var result15 = [result17, result18];
          } else {
            var result15 = null;
            pos = savedPos5;
          }
        } else {
          var result15 = null;
          pos = savedPos5;
        }
        var result16 = result15 !== null
          ? (function(operator) {
                  return {
                      'operator': operator
                      };
              })(result15[0])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result12 = parse_operator_exp();
          if (result12 !== null) {
            var result13 = parse_node();
            if (result13 !== null) {
              var result10 = [result12, result13];
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          var result11 = result10 !== null
            ? (function(operator, right) {
                    return right;
                })(result10[0], result10[1])
            : null;
          if (result11 !== null) {
            var result9 = result11;
          } else {
            var result9 = null;
            pos = savedPos2;
          }
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result4 = parse_group_exp();
            if (result4 !== null) {
              var result5 = [];
              var result8 = parse_operator_exp();
              while (result8 !== null) {
                result5.push(result8);
                var result8 = parse_operator_exp();
              }
              if (result5 !== null) {
                var result6 = [];
                var result7 = parse_node();
                while (result7 !== null) {
                  result6.push(result7);
                  var result7 = parse_node();
                }
                if (result6 !== null) {
                  var result2 = [result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(left, operator, right) {
                      var node= {
                          'left':left
                          };

                      var right =
                              right.length == 0
                              ? null
                              : right[0]['right'] == null
                                  ? right[0]['left']
                                  : right[0];

                      if (right != null)
                      {
                          node['operator'] = operator==''? 'OR' : operator[0];
                          node['right'] = right;
                      }

                      return node;
                  })(result2[0], result2[1], result2[2])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_group_exp() {
        var cacheKey = 'group_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_field_exp();
        if (result5 !== null) {
          var result6 = [];
          var result7 = parse__();
          while (result7 !== null) {
            result6.push(result7);
            var result7 = parse__();
          }
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(field_exp) {
                  return field_exp;
              })(result3[0])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_paren_exp();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_paren_exp() {
        var cacheKey = 'paren_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result8 = parse_node();
          if (result8 !== null) {
            var result4 = [];
            while (result8 !== null) {
              result4.push(result8);
              var result8 = parse_node();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result5 = ")";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse__();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse__();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(node) {
                  return node[0];
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_field_exp() {
        var cacheKey = 'field_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos4 = pos;
        var savedPos5 = pos;
        var result17 = parse_fieldname();
        var result15 = result17 !== null ? result17 : '';
        if (result15 !== null) {
          var result16 = parse_range_operator_exp();
          if (result16 !== null) {
            var result13 = [result15, result16];
          } else {
            var result13 = null;
            pos = savedPos5;
          }
        } else {
          var result13 = null;
          pos = savedPos5;
        }
        var result14 = result13 !== null
          ? (function(fieldname, range) {
                  range['field'] =
                      fieldname == ''
                          ? "<implicit>"
                          : fieldname;

                  return range;
              })(result13[0], result13[1])
          : null;
        if (result14 !== null) {
          var result12 = result14;
        } else {
          var result12 = null;
          pos = savedPos4;
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result10 = parse_fieldname();
          if (result10 !== null) {
            var result11 = parse_paren_exp();
            if (result11 !== null) {
              var result8 = [result10, result11];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(fieldname, node) {
                    node['field']= fieldname;
                    return node;
                })(result8[0], result8[1])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result6 = parse_fieldname();
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              var result5 = parse_term();
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(fieldname, term) {
                      var fieldexp = {
                          'field':
                              fieldname == ''
                                  ? "<implicit>"
                                  : fieldname
                          };

                      for(var key in term)
                          fieldexp[key] = term[key];

                      return fieldexp;
                  })(result2[0], result2[1])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_fieldname() {
        var cacheKey = 'fieldname@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_unquoted_term();
        if (result3 !== null) {
          if (input.substr(pos).match(/^[:]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[:]");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fieldname) {
                  return fieldname;
              })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_term() {
        var cacheKey = 'term@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        var savedPos3 = pos;
        var result24 = parse_prefix_operator_exp();
        var result16 = result24 !== null ? result24 : '';
        if (result16 !== null) {
          var result17 = parse_quoted_term();
          if (result17 !== null) {
            var result23 = parse_proximity_modifier();
            var result18 = result23 !== null ? result23 : '';
            if (result18 !== null) {
              var result22 = parse_boost_modifier();
              var result19 = result22 !== null ? result22 : '';
              if (result19 !== null) {
                var result20 = [];
                var result21 = parse__();
                while (result21 !== null) {
                  result20.push(result21);
                  var result21 = parse__();
                }
                if (result20 !== null) {
                  var result14 = [result16, result17, result18, result19, result20];
                } else {
                  var result14 = null;
                  pos = savedPos3;
                }
              } else {
                var result14 = null;
                pos = savedPos3;
              }
            } else {
              var result14 = null;
              pos = savedPos3;
            }
          } else {
            var result14 = null;
            pos = savedPos3;
          }
        } else {
          var result14 = null;
          pos = savedPos3;
        }
        var result15 = result14 !== null
          ? (function(op, term, proximity, boost) {
                  var result = { 'term': term };

                  if('' != proximity)
                  {
                      result['proximity'] = proximity;
                  }
                  if('' != boost)
                  {
                      result['boost'] = boost;
                  }
                  if('' != op)
                  {
                      result['prefix'] = op;
                  }

                  return result;
              })(result14[0], result14[1], result14[2], result14[3])
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result12 = parse_prefix_operator_exp();
          var result4 = result12 !== null ? result12 : '';
          if (result4 !== null) {
            var result5 = parse_unquoted_term();
            if (result5 !== null) {
              var result11 = parse_fuzzy_modifier();
              var result6 = result11 !== null ? result11 : '';
              if (result6 !== null) {
                var result10 = parse_boost_modifier();
                var result7 = result10 !== null ? result10 : '';
                if (result7 !== null) {
                  var result8 = [];
                  var result9 = parse__();
                  while (result9 !== null) {
                    result8.push(result9);
                    var result9 = parse__();
                  }
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(op, term, similarity, boost) {
                    var result = { 'term': term };
                    if('' != similarity)
                    {
                        result['similarity'] = similarity;
                    }
                    if('' != boost)
                    {
                        result['boost'] = boost;
                    }
                    if('' != op)
                    {
                        result['prefix'] = op;
                    }
                    return result;
                })(result2[0], result2[1], result2[2], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_unquoted_term() {
        var cacheKey = 'unquoted_term@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[^: 	\r\n{}()"+-\/^~[\]]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[^: 	\\r\\n{}()\"+-\\/^~[\\]]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[^: 	\r\n{}()"+-\/^~[\]]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[^: 	\\r\\n{}()\"+-\\/^~[\\]]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(term) {
                  return term.join('');
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_quoted_term() {
        var cacheKey = 'quoted_term@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              if (input.substr(pos).match(/^[^"]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\"]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(term) {
                  return term.join('');
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_proximity_modifier() {
        var cacheKey = 'proximity_modifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "~") {
          var result3 = "~";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"~\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_int_exp();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(proximity) {
                  return proximity;
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_boost_modifier() {
        var cacheKey = 'boost_modifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "^") {
          var result3 = "^";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_decimal_or_int_exp();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(boost) {
                  return boost;
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_fuzzy_modifier() {
        var cacheKey = 'fuzzy_modifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "~") {
          var result3 = "~";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"~\"");
          }
        }
        if (result3 !== null) {
          var result5 = parse_decimal_exp();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fuzziness) {
                  return fuzziness == '' ? 0.5 : fuzziness;
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_decimal_or_int_exp() {
        var cacheKey = 'decimal_or_int_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_decimal_exp();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_int_exp();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_decimal_exp() {
        var cacheKey = 'decimal_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "0.") {
          var result3 = "0.";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"0.\"");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) {
                  return parseFloat("0." + val.join(''));
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_int_exp() {
        var cacheKey = 'int_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(val) {
                  return parseInt(val.join(''));
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_range_operator_exp() {
        var cacheKey = 'range_operator_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "[") {
          var result16 = "[";
          pos += 1;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result16 !== null) {
          var result17 = parse_unquoted_term();
          if (result17 !== null) {
            var result18 = [];
            var result24 = parse__();
            while (result24 !== null) {
              result18.push(result24);
              var result24 = parse__();
            }
            if (result18 !== null) {
              if (input.substr(pos, 2) === "TO") {
                var result19 = "TO";
                pos += 2;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("\"TO\"");
                }
              }
              if (result19 !== null) {
                var result23 = parse__();
                if (result23 !== null) {
                  var result20 = [];
                  while (result23 !== null) {
                    result20.push(result23);
                    var result23 = parse__();
                  }
                } else {
                  var result20 = null;
                }
                if (result20 !== null) {
                  var result21 = parse_unquoted_term();
                  if (result21 !== null) {
                    if (input.substr(pos, 1) === "]") {
                      var result22 = "]";
                      pos += 1;
                    } else {
                      var result22 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result22 !== null) {
                      var result14 = [result16, result17, result18, result19, result20, result21, result22];
                    } else {
                      var result14 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos3;
                }
              } else {
                var result14 = null;
                pos = savedPos3;
              }
            } else {
              var result14 = null;
              pos = savedPos3;
            }
          } else {
            var result14 = null;
            pos = savedPos3;
          }
        } else {
          var result14 = null;
          pos = savedPos3;
        }
        var result15 = result14 !== null
          ? (function(term_min, term_max) {
                  return {
                      'term_min': term_min,
                      'term_max': term_max,
                      'inclusive': true
                  };
              })(result14[1], result14[5])
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "{") {
            var result4 = "{";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_unquoted_term();
            if (result5 !== null) {
              var result6 = [];
              var result12 = parse__();
              while (result12 !== null) {
                result6.push(result12);
                var result12 = parse__();
              }
              if (result6 !== null) {
                if (input.substr(pos, 2) === "TO") {
                  var result7 = "TO";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"TO\"");
                  }
                }
                if (result7 !== null) {
                  var result11 = parse__();
                  if (result11 !== null) {
                    var result8 = [];
                    while (result11 !== null) {
                      result8.push(result11);
                      var result11 = parse__();
                    }
                  } else {
                    var result8 = null;
                  }
                  if (result8 !== null) {
                    var result9 = parse_unquoted_term();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result10 = "}";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result10 !== null) {
                        var result2 = [result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(term_min, term_max) {
                    return {
                        'term_min': term_min,
                        'term_max': term_max,
                        'inclusive': false
                    };
                })(result2[1], result2[5])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_operator_exp() {
        var cacheKey = 'operator_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos2 = pos;
        var savedPos3 = pos;
        var result11 = [];
        var result15 = parse__();
        while (result15 !== null) {
          result11.push(result15);
          var result15 = parse__();
        }
        if (result11 !== null) {
          var result12 = parse_operator();
          if (result12 !== null) {
            var result14 = parse__();
            if (result14 !== null) {
              var result13 = [];
              while (result14 !== null) {
                result13.push(result14);
                var result14 = parse__();
              }
            } else {
              var result13 = null;
            }
            if (result13 !== null) {
              var result9 = [result11, result12, result13];
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(operator) {
                  return operator;
              })(result9[1])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = [];
          var result7 = parse__();
          while (result7 !== null) {
            result4.push(result7);
            var result7 = parse__();
          }
          if (result4 !== null) {
            var result5 = parse_operator();
            if (result5 !== null) {
              var result6 = parse_EOF();
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(operator) {
                    return operator;
                })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_operator() {
        var cacheKey = 'operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "OR") {
          var result9 = "OR";
          pos += 2;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"OR\"");
          }
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          if (input.substr(pos, 3) === "AND") {
            var result8 = "AND";
            pos += 3;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"AND\"");
            }
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            if (input.substr(pos, 3) === "NOT") {
              var result7 = "NOT";
              pos += 3;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"NOT\"");
              }
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 2) === "||") {
                var result5 = "||";
                pos += 2;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"||\"");
                }
              }
              var result6 = result5 !== null
                ? (function() { return 'OR'; })()
                : null;
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 2) === "&&") {
                  var result2 = "&&";
                  pos += 2;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"&&\"");
                  }
                }
                var result3 = result2 !== null
                  ? (function() { return 'AND'; })()
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_prefix_operator_exp() {
        var cacheKey = 'prefix_operator_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result5 = parse__();
        while (result5 !== null) {
          result3.push(result5);
          var result5 = parse__();
        }
        if (result3 !== null) {
          var result4 = parse_prefix_operator();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(operator) {
                  return operator;
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_prefix_operator() {
        var cacheKey = 'prefix_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result1 = "-";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\r\\n]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	\\r\\n]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EOF() {
        var cacheKey = 'EOF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.length > pos) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result1 === null) {
          var result0 = '';
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();

          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }

          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



      var result = parseFunctions[startRule]();

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();
  return lucenequeryparser;
});